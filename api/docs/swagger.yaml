definitions:
  reservation.GetAllReservationRes:
    properties:
      reservation:
        items:
          $ref: '#/definitions/reservation.ReservationRes'
        type: array
    type: object
  reservation.GetAllRestaurantRes:
    properties:
      restaurant:
        items:
          $ref: '#/definitions/reservation.Restaurant'
        type: array
    type: object
  reservation.Reservation:
    properties:
      id:
        type: string
      reservation_time:
        type: string
      restaurant_id:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  reservation.ReservationReq:
    properties:
      reservation_time:
        type: string
      restaurant_id:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  reservation.ReservationRes:
    properties:
      id:
        type: string
      reservation_time:
        type: string
      restaurant:
        $ref: '#/definitions/reservation.Restaurant'
      status:
        type: string
      user:
        $ref: '#/definitions/reservation.UserGetByIdResp'
    type: object
  reservation.Restaurant:
    properties:
      address:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      phone_number:
        type: string
    type: object
  reservation.RestaurantReq:
    properties:
      address:
        type: string
      description:
        type: string
      name:
        type: string
      phone_number:
        type: string
    type: object
  reservation.UserGetByIdResp:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /reservation:
    post:
      consumes:
      - application/json
      description: Create a new reservation
      parameters:
      - description: Reservation data
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/reservation.ReservationReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reservation.Reservation'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create reservation
      tags:
      - reservation
  /reservation/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a reservation by ID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Reservation deleted
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Reservation not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete reservation
      tags:
      - reservation
    get:
      consumes:
      - application/json
      description: Get a reservation by ID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reservation.ReservationRes'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Reservation not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get reservation
      tags:
      - reservation
    put:
      consumes:
      - application/json
      description: Update an existing reservation
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated reservation data
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/reservation.ReservationReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reservation.ReservationReq'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Reservation not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update reservation
      tags:
      - reservation
  /reservations:
    get:
      consumes:
      - application/json
      description: Get all reservations
      parameters:
      - description: User ID
        in: query
        name: user_id
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reservation.GetAllReservationRes'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all reservations
      tags:
      - reservation
  /restaurant:
    post:
      consumes:
      - application/json
      description: Create a new restaurant
      parameters:
      - description: Restaurant data
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/reservation.RestaurantReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reservation.Restaurant'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create restaurant
      tags:
      - restaurant
  /restaurant/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a restaurant by ID
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Restaurant deleted
          schema:
            type: string
        "400":
          description: Invalid restaurant ID
          schema:
            type: string
        "404":
          description: Restaurant not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete restaurant
      tags:
      - restaurant
    get:
      consumes:
      - application/json
      description: Get a restaurant by ID
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reservation.Restaurant'
        "400":
          description: Invalid restaurant ID
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get restaurant
      tags:
      - restaurant
    put:
      consumes:
      - application/json
      description: Update an existing restaurant
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated restaurant data
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/reservation.RestaurantReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reservation.RestaurantReq'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Restaurant not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update restaurant
      tags:
      - restaurant
  /restaurants:
    get:
      consumes:
      - application/json
      description: Get all restaurants
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reservation.GetAllRestaurantRes'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all restaurants
      tags:
      - restaurant
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
