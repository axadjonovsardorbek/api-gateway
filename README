git submodule update --init --recursive
git submodule foreach git pull origin main 
||
git submodule update --recursive --remote


protoc --go_out=proto-service/ \
    --go-grpc_out=proto-service/ \
    proto-service/voting-protos/*.proto


{
  "reservation_time": "2026-05-05",
  "restaurant_id": "7c205bf6-66c8-4f1e-8b07-9ae39be3bb49",
  "status": "bo'sh",
  "user_id": "30725b55-f951-415c-9274-c88dcf22d943"
}



can you continue and write me this code to the restaurnt too? i need also swaggers...
here is the restaurant proto:
syntax = "proto3";

option go_package = "genproto/reservation";

package reservation;

import "restaurant.proto";
import "user.proto";
import "common.proto";

service ReservationService {
  rpc Create (ReservationReq) returns (Reservation) {}
  rpc Get (GetByIdReq) returns (ReservationRes) {}
  rpc GetAll (GetAllReservationReq) returns (GetAllReservationRes) {}
  rpc Update (ReservationUpdate) returns (Reservation) {}
  rpc Delete (GetByIdReq) returns (Void) {}
}

message Reservation {
  string  id = 1;
  string  user_id = 2;
  string  restaurant_id = 3;
  string  reservation_time = 4;
  string  status = 5;
}

message ReservationReq {
  string  user_id = 1;
  string  restaurant_id = 2;
  string  reservation_time = 3;
  string  status = 4;
}

message ReservationRes {
  string           id = 1;
  UserGetByIdResp  user = 2;
  Restaurant       restaurant = 3;
  string           reservation_time = 4;
  string           status = 5;
}

message ReservationUpdate {
  ReservationReq updateReservation = 1;
  GetByIdReq     id = 2;
}

message GetAllReservationReq {
  string user_id = 1;
  Filter filter = 2;
}

message GetAllReservationRes {
  repeated ReservationRes reservation = 1;
}
and common.proto:
syntax = "proto3";

option go_package = "genproto/reservation";

package reservation;

message Void {}

message GetByIdReq {
  string id = 1;
}

message Filter {
  int32 limit = 1;
  int32 offset = 2;
}

and also i need routers like this:
	reservation := protected.Group("/reservation")
	reservation.POST("/", h.ReservationCreate)
	reservation.GET("/:id", h.ReservationGet)
	reservation.PUT("/:id", h.ReservationUpdate)
	reservation.DELETE("/:id", h.ReservationDelete)
	protected.GET("/reservations", h.ReservationGetAll)

it also should require auth to send requests, but don't write auth side, it's already written.
just use it like this:
// UpdateReservation godoc
// @Summary Update reservation
// @Description Update an existing reservation
// @Tags reservation
// @Accept json
// @Produce json
// @Param id path string true "Reservation ID"
// @Param reservation body pbr.ReservationUpdate true "Updated reservation data"
// @Success 200 {object} pbr.ReservationUpdate
// @Failure 401 {object} string "Unauthorized"
// @Failure 404 {object} string "Reservation not found"
// @Failure 500 {object} string "Server error"
// @Security BearerAuth
// @Router /reservation/{id} [put]
func (h *HTTPHandler) ReservationUpdate(c *gin.Context) {
	id := c.Param("id")
	var req pbr.ReservationUpdate
	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request payload"})
		return
	}

	req.Id = &pbr.GetByIdReq{Id: id}
	res, err := h.Reservation.Update(context.Background(), &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Couldn't update reservation", "details": err.Error()})
		return
	}
	c.JSON(http.StatusOK, res)
}

your code should look like this:

package handlers

import (
	pbr "api-gateway/genproto/reservation"
	"context"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

// CreateReservation godoc
// @Summary Create reservation
// @Description Create a new reservation
// @Tags reservation
// @Accept json
// @Produce json
// @Param reservation body pbr.ReservationReq true "Reservation data"
// @Success 200 {object} pbr.Reservation
// @Failure 401 {object} string "Unauthorized"
// @Failure 500 {object} string "Server error"
// @Security BearerAuth
// @Router /reservation [post]
func (h *HTTPHandler) ReservationCreate(c *gin.Context) {
	var req pbr.ReservationReq
	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request payload"})
		return
	}

	res, err := h.Reservation.Create(context.Background(), &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, res)
}

// GetReservation godoc
// @Summary Get reservation
// @Description Get a reservation by ID
// @Tags reservation
// @Accept json
// @Produce json
// @Param id path string true "Reservation ID"
// @Success 200 {object} pbr.GetByIdReq
// @Failure 401 {object} string "Unauthorized"
// @Failure 404 {object} string "Reservation not found"
// @Failure 500 {object} string "Server error"
// @Security BearerAuth
// @Router /reservation/{id} [get]
func (h *HTTPHandler) ReservationGet(c *gin.Context) {
	id := &pbr.GetByIdReq{Id: c.Param("id")}
	res, err := h.Reservation.Get(context.Background(), id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Couldn't get reservation", "details": err.Error()})
		return
	}
	c.JSON(http.StatusOK, res)
}

// UpdateReservation godoc
// @Summary Update reservation
// @Description Update an existing reservation
// @Tags reservation
// @Accept json
// @Produce json
// @Param id path string true "Reservation ID"
// @Param reservation body pbr.ReservationUpdate true "Updated reservation data"
// @Success 200 {object} pbr.ReservationUpdate
// @Failure 401 {object} string "Unauthorized"
// @Failure 404 {object} string "Reservation not found"
// @Failure 500 {object} string "Server error"
// @Security BearerAuth
// @Router /reservation/{id} [put]
func (h *HTTPHandler) ReservationUpdate(c *gin.Context) {
	id := c.Param("id")
	var req pbr.ReservationUpdate
	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request payload"})
		return
	}

	req.Id = &pbr.GetByIdReq{Id: id}
	res, err := h.Reservation.Update(context.Background(), &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Couldn't update reservation", "details": err.Error()})
		return
	}
	c.JSON(http.StatusOK, res)
}

// DeleteReservation godoc
// @Summary Delete reservation
// @Description Delete a reservation by ID
// @Tags reservation
// @Accept json
// @Produce json
// @Param id path string true "Reservation ID"
// @Success 200 {object} string "Reservation deleted"
// @Failure 401 {object} string "Unauthorized"
// @Failure 404 {object} string "Reservation not found"
// @Failure 500 {object} string "Server error"
// @Security BearerAuth
// @Router /reservation/{id} [delete]
func (h *HTTPHandler) ReservationDelete(c *gin.Context) {
	id := &pbr.GetByIdReq{Id: c.Param("id")}
	_, err := h.Reservation.Delete(context.Background(), id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Couldn't delete reservation", "details": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "Reservation deleted"})
}

// GetAllReservations godoc
// @Summary Get all reservations
// @Description Get all reservations
// @Tags reservation
// @Accept json
// @Produce json
// @Param user_id query string false "User ID"
// @Param limit query int false "Limit"
// @Param offset query int false "Offset"
// @Success 200 {object} pbr.GetAllReservationRes
// @Failure 400 {object} string "Invalid parameters"
// @Failure 401 {object} string "Unauthorized"
// @Failure 500 {object} string "Server error"
// @Security BearerAuth
// @Router /reservations [get]
func (h *HTTPHandler) ReservationGetAll(c *gin.Context) {
	user_id := c.Query("user_id")
	limitStr := c.Query("limit")
	offsetStr := c.Query("offset")
	limit, err := strconv.Atoi(limitStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid limit parameter"})
		return
	}
	offset, err := strconv.Atoi(offsetStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid offset parameter"})
		return
	}

	res, err := h.Reservation.GetAll(context.Background(), &pbr.GetAllReservationReq{
		UserId: user_id,
		Filter: &pbr.Filter{
			Limit:  int32(limit),
			Offset: int32(offset),
		},
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Couldn't get reservations", "details": err.Error()})
		return
	}
	c.JSON(http.StatusOK, res)
}
